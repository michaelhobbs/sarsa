'''
Agent trained with epsilon = 1, running an extra trial in exploitation mode (epsilon = 0)
'''
import numpy as np
from classes.ql.ql import QLearn
import matplotlib.pyplot as plt
import os
from animations import animate

os.makedirs('images/exploit/', exist_ok=True)


def d(id, wid):
    return f'output/epsilons/1/{id}/weights/{wid}.csv'


w = np.loadtxt(d(0, 50), delimiter=",")

axisSize = 20
xDelta = 1 / (axisSize - 1)
axis = [(j % axisSize) * xDelta for j in range(axisSize)]
x = axis
y = axis
X, Y = np.meshgrid(x, y)

maxElements = [np.amax(w[i, :]) for i in range(axisSize*axisSize)]
maxElement = np.amax(maxElements)
maxIndexes = [np.random.choice(np.where(w[i, :] == maxElements[i])[
    0]) for i in range(axisSize*axisSize)]


def convertIndexToX(i):
    return np.array([0, 0.7, 1, 0.7, 0, -0.7, -1, -0.7])[i]


def convertIndexToY(i):
    return np.array([-1, -0.7, 0, 0.7, 1, 0.7, 0, -0.7])[i]


u = [convertIndexToX(maxIndexes[:])]
v = [convertIndexToY(maxIndexes[:])]
rectangle = plt.Rectangle((0, 0), 1, 1, ec='blue', fc='none')
circle2 = plt.Circle((0.8, 0.8), 0.1, color='r', fill=False)
_, ax = plt.subplots()
plt.gca().add_patch(rectangle)
ax.add_artist(circle2)
plt.plot([0.1], [0.1], 'rx')
ax.quiver(X, Y, u, v)
# ax.quiver(X,Y,u,v, scale=2*axisSize, scale_units='xy')
ax.xaxis.set_ticks([])
ax.yaxis.set_ticks([])
ax.axis([-0.1, 1.1, -0.1, 1.1])
ax.set_aspect('equal')
plt.title('Argmax Q(s,a) after training for agent trained on epsilon = 1')
plt.savefig('images/exploit/quiver.svg')
plt.close()

exploit = QLearn(0,
                 outputDirectory='output/exploit/',
                 weights=w)
[eligibilityTrace, hasGoal, currentStep,
 trialReward, ratCoords] = exploit.runTrial(0)

data = np.loadtxt(
    f'output/exploit/0/ratCoords/ratCoords_1.csv', delimiter=",")
data = data.reshape(int(len(data)/2), 2).T
title = f'Explorer'
out = f'images/animations/explorer'
animate(data, title, out)
